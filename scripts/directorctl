#! /bin/bash
VERSION=1.3.2
# Oliver Herrmann <oliver@boreal.systems>

# TERMINAL CONTROL CHARS
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'
BOLD='\033[1m'
username=$USER

#REFERENCE
case "$OSTYPE" in
  solaris*) OS="SOLARIS" ;;
  darwin*)  OS="MACOS" ;; 
  linux*)   OS="LINUX" ;;
  bsd*)     OS="BSD" ;;
  msys*)    OS="WINDOWS" ;;
  *)        echo "unknown: $OSTYPE"; exit ;;
esac

function printHeader {
  echo "" # clear
  echo -e "${GREEN}Boreal Systems Director Lifecycle Management v${VERSION}${NC}"
  echo ""
}

function startup {
  cd /var/BorealSystems/Director
  if [[ $OS = MACOS ]]; then
    TZ=$(readlink /etc/localtime | sed 's#/var/db/timezone/zoneinfo/##') docker-compose up -d
  else
    TZ=$(cat /etc/timezone) docker-compose up -d
  fi
}

function shutdown {
  echo ""
  cd /var/BorealSystems/Director
  if [[ $OS = MACOS ]]; then
    TZ=$(readlink /etc/localtime | sed 's#/var/db/timezone/zoneinfo/##') docker-compose down
  else
    TZ=$(cat /etc/timezone) docker-compose down
  fi
  echo ""
  echo -e "${BOLD}Shutdown Complete [${GREEN}✔${NC}]${NC}" 
}

function printhelp {
  echo -e "${BOLD}Commands Available:${NC}" 
  echo ""
  echo "   install <stable|achilles|canary>" 
  echo "   update" 
  echo "   uninstall [purge]" 
  echo ""
  echo "   start" 
  echo "   restart" 
  echo "   stop" 
  echo "   status" 
  echo ""
  echo "   logs" 
  echo "   backup" 
  echo "   restore <backup zip>" 
  echo ""
  echo "   help" 
  echo ""
  exit
}

if ! command -v docker &> /dev/null; then
  echo -e "${RED}Director requires Docker and docker-compose to be installed.${NC}"
  exit
fi

if ! command -v docker-compose &> /dev/null; then
  echo -e "${RED}Director requires Docker and docker-compose to be installed.${NC}"
  exit
fi

printHeader

if [ $# -eq 0 ]; then # Handle No Parameters
  printhelp
elif [ $1 = 'install' ]; then # Handle Installs
  if [ -z "$2" ]; then
    echo -e "${BOLD}Installation Versions Available:${NC}" 
    echo ""
    echo -e "   Stable" 
    echo -e "      Stable is the production release, that doesn't currently exist" 
    echo ""
    echo -e "   Achilles" 
    echo -e "      Achilles is the rolling development release that gets built on every commit" 
    echo ""
    echo -e "   Canary" 
    echo -e "      Canary will pull the repo and build it locally on your system, useful for development" 
    echo ""
    exit
  fi
  if [ -f '/var/BorealSystems/Director/version' ]; then
    previousversion=$(</var/BorealSystems/Director/version)
  else 
    previousversion=$2
  fi
  if [ $2 = 'stable' ]; then # For Stable
    echo -e "${RED}There is currently no Stable Release available for this platform${NC}"
  elif [ $2 = 'achilles' ]; then # For Rolling Dev
    function achillesInstaller {
      if [[ $OS = MACOS || LINUX ]]; then 
        echo -e "${BOLD}This script requires root access to create directories${NC}"
        echo ""
        sudo echo "Authenticated"
        echo -e "${BOLD}Installing directorctl${NC}"
        sudo curl -s https://get.boreal.systems/director -o /bin/directorctl
        sudo chmod +x /bin/directorctl
        cd /var
        sudo mkdir BorealSystems > /dev/null
        cd BorealSystems
        sudo mkdir Director > /dev/null
        sudo chown -R $username Director 
        cd Director
        mkdir database
        touch version
        touch logs.txt
        echo ""
        echo 'achilles' > version
        echo -e "${BOLD}Pulling docker-compose${NC}"
        curl -fsSL https://get.boreal.systems/docker/docker-compose.achilles.yml -o docker-compose.yml
        echo ""
        echo -e "${BOLD}Starting Director${NC}"
        startup
        echo ""
        echo -e "${BOLD}Install & Startup Complete [${GREEN}✔${NC}]${NC}" 
        if [[ $OS = LINUX ]]; then
          echo -e "${BOLD}Director UI available at $(hostname -I | head -n1 | awk '{print $1;}'):3000${NC}" 
        elif [[ $OS = MACOS ]]; then
          echo -e "${BOLD}Director UI available at $(ifconfig $(route get default | awk '/interface/' | awk '{print $2}') | awk '/inet /' | awk '{print $2}'):3000${NC}" 
        fi
        echo -e "${BOLD}Manage Director with ${NC}${GREEN}directorctl${NC}"
        echo ""
      fi
    }

    if [[ $previousversion != $2 ]]; then 
      echo "This server previously had $previousversion installed but you are trying to install $2, this may result in data corruption, are you sure you want to continue?"
      read -p "[y/n]" -n 1 -r # ask if want to install thing
      echo ""
      if [[ $REPLY =~ ^[Yy]$ ]] # if yes reply
      then
        achillesInstaller
      else
        exit
      fi
    else
      achillesInstaller
    fi

  elif [ $2 = canary ]; then # For local build
    bash <(curl -s https://raw.githubusercontent.com/borealsystems/Director/master/scripts/canary.sh)
  fi

elif [ $1 = 'start' ]; then # Handle startup
  startup

elif [ $1 = 'stop' ]; then # Handle Shutdown
  read -p "Are you sure you want to shutdown Director? This will disconnect all sessions and devices [y/N] " -n 1 -r # Confirm shutdown
  if [[ $REPLY =~ ^[Yy]$ ]] # If yes
  then
    shutdown
  else
      exit
  fi

elif [ $1 = 'restart' ]; then # Handle Restart
  read -p "Are you sure you want to restart Director? This will disconnect all sessions and devices [y/N] " -n 1 -r # Confirm restart
  echo ""
  if [[ $REPLY =~ ^[Yy]$ ]] # If yes
  then
    cd /var/BorealSystems/Director
    echo -e "${BOLD}Restarting Director${NC}" 
    echo ""
    docker-compose restart
    echo ""
    echo -e "${BOLD}Restart Complete [${GREEN}✔${NC}]${NC}" 
    echo ""
  else
      exit
  fi

elif [ $1 = 'update' ]; then # Handle Update
  read -p "Are you sure you want to update Director? This will disconnect all sessions and devices for several minutes [y/N] " -n 1 -r # Confirm restart
  if [[ $REPLY =~ ^[Yy]$ ]] # If yes
  then
    cd /var/BorealSystems/Director
    version=$(<version)
    echo ""
    echo -e "${BOLD}Updating to latest $version release${NC}" 
    if [ $version = 'stable' ]; then
      echo "There is currently no Stable Release available for this platform"
    elif [ $version == 'achilles' ]; then
      echo ""
      docker-compose pull
      echo ""
      echo -e "${BOLD}Restarting Director${NC}" 
      echo ""
      docker-compose up -d
      echo ""
      echo -e "${BOLD}Installing directorctl${NC}"
      sudo curl -s https://get.boreal.systems/director -o /bin/directorctl
      sudo chmod +x /bin/directorctl
      echo ""
      echo -e "${BOLD}Update Complete [${GREEN}✔${NC}]${NC}" 
      echo ""
    elif [ $version = canary ]; then
      echo -e "${RED}There is currently no Canary Release available for this platform${NC}"
    fi
  else
      exit
  fi

elif [ $1 = 'uninstall' ]; then # Handle Uninstall
  if [[ $2 = 'purge' ]]; then 
    PURGE=true
    echo -e "Are you sure you want to completely uninstall Director? This will remove all Director containers, images, ${RED}and database content${NC}."
  else
    echo "Are you sure you want to completely uninstall Director? This will remove all Director containers and images, but will leave the database files in place in /var/BorealSystems/Director."
  fi
  read -p "[y/N] " -n 1 -r # Confirm Uninstall
  if [[ $REPLY =~ ^[Yy]$ ]]; then # Confirmed
    cd /var/BorealSystems/Director
    version=$(<version)
    echo ""
    echo -e "${RED}Uninstalling BorealSystems Director${NC}" 
    echo ""
    if [[ $version = 'stable' || 'achilles' ]]; then
      echo -e "${BOLD}Shutting Down Director${NC}" 
      echo ""
      docker-compose down
      echo ""
      echo -e "${BOLD}Removing Images${NC}" 
      echo ""
      docker image remove borealsystems/director:$version-core
      docker image remove borealsystems/director:$version-ui
      echo -e "${BOLD}Removing docker-compose.yml${NC}" 
      rm docker-compose.yml
      echo -e "${BOLD}Removed docker-compose.yml${NC}" 
      echo ""
      if [[ $PURGE = true ]]; then 
        echo -e "${BOLD}Removing database (requires sudo)${NC}" 
        sudo rm -rf ./database
        echo ""
        sudo rm -rf /var/BorealSystems/Director
      fi
      echo -e "${BOLD}Director has been uninstalled [${GREEN}✔${NC}]${NC}" 
      echo ""
    elif [ $version = canary ]; then
      echo -e "${RED}There is currently no Canary Release available for this platform${NC}"
    fi
    else
      exit
    fi

elif [ $1 = 'status' ]; then # Handle Status
  if [[ $(docker ps -a | grep 'director' | grep 'Exited') ]]; then
    echo -e "${RED}One or more containers are in an error state [❌]${NC}"
  elif [[ $(docker ps -a | grep 'director' | grep 'Up') ]]; then
    echo -e "Director is not reporting errors [${GREEN}✔${NC}]"
  else 
    echo -e "Director is not running [${RED}❌${NC}]"
  fi
  echo ""

elif [ $1 = 'backup' ]; then # Handle DB Backup
  echo -e "Backing up Director database"
  cp -r /var/BorealSystems/Director/database .
  sudo chmod -R 777 ./database
  zip -r DirectorDB_$(date +"%Y-%m-%d") ./database > /dev/null
  rm -rf ./database
  echo -e "Director backup successful [${GREEN}✔${NC}] ("${PWD}/DirectorDB_$(date +"%Y-%m-%d").zip")"
  echo ""

elif [ $1 = 'restore' ]; then # Handle DB Restore
  if [ -z "$2" ]; then
    echo -e "${RED}Please provide a path to a DirectorDB zip${NC}"
    echo ""
    exit
  fi
  echo "Are you sure you want to restore the Director database?"
  echo "This will replace everything on this install and disconnect all sessions and devices for a short period of time"
  read -p "Continue? [y/N] " -n 1 -r # Confirm restart
  if [[ $REPLY =~ ^[Yy]$ ]] # If yes
  then
    BACKUPFILE=$2
    BACKUP=$PWD/$BACKUPFILE
    if [[ $(unzip -l ${BACKUP} | grep -q '_mdb_catalog.wt' && echo $?) = 0 ]]
    then
      echo ""
      shutdown
      echo ""
      echo "Restoring $BACKUP"
      echo ""
      rm -rf ./database
      cp $BACKUP .
      unzip $BACKUPFILE > /dev/null
      rm $BACKUPFILE
      echo -e "${BOLD}Starting Director${NC}" 
      echo ""
      startup
      echo ""
      echo -e "${BOLD}Restore Complete [${GREEN}✔${NC}]${NC}" 
      echo ""

    else
      echo ""
      echo ""
      echo -e "${RED}This does not seem to be a valid backup${NC}"
      echo ""
      exit
    fi
  else
    exit
  fi

elif [ $1 = 'help' ]; then # Handle help
  printhelp

elif [ $1 = 'logs' ]; then # Handle Logs
  less +G /var/BorealSystems/Director/logs.txt

else 
  printhelp
fi
